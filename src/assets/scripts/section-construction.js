import Swiper, { Navigation, Scrollbar } from 'swiper';
import { pad, useState } from './modules/helpers/helpers';

Swiper.use([Navigation, Scrollbar]);

function constructionSliderHandler() {
  return new Swiper('[data-construction-slider]', {
    slidesPerView: 1,
    spaceBetween: 0,
    breakpoints: {
      1300: {
        slidesPerView: 3,
        spaceBetween: 30,
      },
      768: {
        slidesPerView: 2,
        spaceBetween: 30,
      },
    },
    navigation: {
      nextEl: '[data-construction-slider-next]',
      prevEl: '[data-construction-slider-prev]',
    },
  });
}

const constructionSlider = constructionSliderHandler();

function constructionFilterHandler(slider) {
  const [constructionFilter, setConstructionFilter, subscribeConstructionFilter] = useState({});

  const filters = document.querySelectorAll('[data-construction-filter]');

  // 1. –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  const initialState = {};
  filters.forEach(filter => {
    const key = filter.dataset.constructionFilter;

    const options = filter.querySelectorAll('option');
    const lastOption = options[options.length - 1];
    const lastValue = lastOption.value;

    filter.value = lastValue; // –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤ UI –æ—Å—Ç–∞–Ω–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
    initialState[key] = lastValue;

    console.log(`–§—ñ–ª—å—Ç—Ä "${key}" —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–Ω—è–º: ${lastValue}`);
  });

  // 2. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
  setConstructionFilter(initialState);

  //  –í—Ä—É—á–Ω—É —Ç—Ä–∏–≥–µ—Ä–∏–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  applyFilter(initialState);

  // 3. –í—ñ—à–∞—î–º–æ —Å–ª—É—Ö–∞—á—ñ
  filters.forEach(filter => {
    filter.addEventListener('change', function(evt) {
      const key = evt.target.dataset.constructionFilter;
      const value = evt.target.value;
      const newState = {
        ...constructionFilter(),
        [key]: value,
      };
      setConstructionFilter(newState);
      applyFilter(newState); // üî• –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ
    });
  });

  // 4. –§—É–Ω–∫—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
  function applyFilter(value) {
    const cards = document.querySelectorAll('[data-construction-card]');
    cards.forEach(card => {
      let isShow = true;
      Object.entries(value).forEach(([key, val]) => {
        const cardValue = card.dataset[key];
        if (cardValue != val) {
          isShow = false;
        }
      });
      card.style.display = isShow ? '' : 'none';
    });

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –ø–æ—á–∞—Ç–∫—É —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ª–∞–π–¥–µ—Ä–∞
    slider.slideTo(0);
    slider.update();
  }
}

constructionFilterHandler(constructionSlider);
